# -*- coding: utf-8 -*-
# -----------------------------------------------------------------------------
# Copyright 2015-2018 by ExopyHqcLegacy Authors, see AUTHORS for more details.
#
# Distributed under the terms of the BSD license.
#
# The full license is in the file LICENCE, distributed with this software.
# -----------------------------------------------------------------------------
"""View for the DCVoltMeasTask.

"""
from textwrap import fill

from enaml.widgets.api import (GroupBox, Label, Field, ObjectCombo)
from enaml.stdlib.fields import FloatField, IntField
from enaml.layout.api import factory

from exopy_hqc_legacy.utils.layouts import auto_grid_layout
from ...base_instr_view import InstrView


enamldef MeasDCVoltView(InstrView): view:
    """View for the DCVoltMeasTask.

    """
    constraints = [factory(auto_grid_layout)]

    Label:
        text = 'Wait (s)'
    FloatField:
        value := task.wait_time
        tool_tip = fill("Time to wait before querying values from the "
                        "voltmeter.", 60)

enamldef MeasDCCurrView(InstrView): view:
    """View for the DCVoltMeasTask.

    """
    constraints = [factory(auto_grid_layout)]

    Label:
        text = 'Wait (s)'
    FloatField:
        value := task.wait_time
        tool_tip = fill("Time to wait before querying values from the "
                        "amperemeter.", 60)

enamldef MultiChannelMeasDCVoltView(InstrView): view:
    """View for the DCVoltMeasTask.

    """
    constraints = [factory(auto_grid_layout)]

    Label:
        text = 'Channel'
    IntField:
        value := task.channel
        tool_tip = fill("Channel #", 60)
    Label:
        text = 'Wait (s)'
    FloatField:
        value := task.wait_time
        tool_tip = fill("Time to wait before querying values from the "
                        "voltmeter.", 60)


enamldef MultiChannelChannelLabel(Label):
    """Label for the channel selection.

    """
    attr interface
    attr root
    attr index = 2
    text = 'Channel'


enamldef MultiChannelChannelValue(IntField):
    """Value for the channel selection.

    """
    attr interface
    attr root
    hug_width = 'strong'
    value := interface.channel

enamldef MultiChannelDCVoltageSourceIChannel(IntField):
    """Value for the multi channel interface.

    """
    attr interface
    attr root
    hug_width = 'medium'
    value << interface.channel[1]
    value ::
        interface.channel = (interface.channel[0], change['value'])